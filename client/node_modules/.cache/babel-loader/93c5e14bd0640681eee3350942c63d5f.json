{"ast":null,"code":"import _classCallCheck from \"/Users/andrepinto/Desktop/scytale/my-app-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrepinto/Desktop/scytale/my-app-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrepinto/Desktop/scytale/my-app-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrepinto/Desktop/scytale/my-app-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrepinto/Desktop/scytale/my-app-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrepinto/Desktop/scytale/my-app-react/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nvar MeteoPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MeteoPage, _React$Component);\n\n  function MeteoPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MeteoPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MeteoPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      city: null,\n      forecast: []\n    };\n\n    _this.getWeather = function (_) {\n      var city = _this.state.city.city;\n      fetch('http://localhost:4000/forecast?city=${city}').then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        return _this.setState({\n          city: response.city,\n          forecast: response.data\n        });\n      }).catch(function (err) {\n        return console.error(err);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MeteoPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var weather = this.state.forecast;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return MeteoPage;\n}(React.Component);\n\nReactDOM.render(React.createElement(MeteoPage, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/andrepinto/Desktop/scytale/my-app-react/src/index.js"],"names":["React","ReactDOM","MeteoPage","state","city","forecast","getWeather","_","fetch","then","response","json","setState","data","catch","err","console","error","weather","Component","render","document","getElementById"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;;IAIMC,S;;;;;;;;;;;;;;;;;UAGNC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,IADA;AAENC,MAAAA,QAAQ,EAAE;AAFJ,K;;UAWNC,U,GAAc,UAAAC,CAAC,EAAI;AAAA,UACTH,IADS,GACA,MAAKD,KAAL,CAAWC,IADX,CACTA,IADS;AAEfI,MAAAA,KAAK,CAAC,6CAAD,CAAL,CACGC,IADH,CACQ,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OADhB,EAEGF,IAFH,CAEQ,UAAAC,QAAQ;AAAA,eAAI,MAAKE,QAAL,CAAc;AAAER,UAAAA,IAAI,EAAEM,QAAQ,CAACN,IAAjB;AAAuBC,UAAAA,QAAQ,EAAEK,QAAQ,CAACG;AAA1C,SAAd,CAAJ;AAAA,OAFhB,EAGGC,KAHH,CAGS,UAAAC,GAAG;AAAA,eAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAJ;AAAA,OAHZ;AAID,K;;;;;;;wCAZkB,CAElB;;;6BAgBM;AACP,UAAMG,OAAO,GAAG,KAAKf,KAAL,CAAWE,QAA3B;AAEA,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAKD;;;;EAlCqBL,KAAK,CAACmB,S;;AAyC9BlB,QAAQ,CAACmB,MAAT,CACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n\nclass MeteoPage extends React.Component {\n\n\nstate = {\n  city: null,\n  forecast: []\n\n}\n    componentDidMount(){\n\n    }\n\n\n\n  getWeather =  _ => {\n    const { city } = this.state.city;\n      fetch('http://localhost:4000/forecast?city=${city}')\n        .then(response => response.json())\n        .then(response => this.setState({ city: response.city, forecast: response.data}))\n        .catch(err => console.error(err))\n    }\n\n\n\n\n\n  render() {\n    const weather = this.state.forecast;\n\n    return (\n      <div className=\"App\">\n\n      </div>\n    );\n  }\n}\n\n\n\n\n\nReactDOM.render(\n  <MeteoPage />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}